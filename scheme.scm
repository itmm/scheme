(define nil ())
(define (cadr l)
  (car (cdr l)))
(define (cddr l)
  (cdr (cdr l)))
(define (caddr l)
  (car (cddr l)))
(define (cdddr l)
  (cdr (cddr l)))
(define (list . l) l)
(define true #t)
(define false #f)
(define (> a b)
  (< b a))
(define (not a) (if a #f #t))

(define + (lambda-case
	   (() 0)
	   ((a) a)
	   ((a b) (@binary+ a b))
	   (x (apply + (cons (@binary+ (car x) (cadr x)) (cddr x))))))
(define - (lambda-case
	   (() 0)
	   ((a) (@binary- 0 a))
	   ((a b) (@binary- a b))
	   (x (apply - (cons (@binary- (car x) (cadr x)) (cddr x))))))
(define * (lambda-case
	   (() 1)
	   ((a) a)
	   ((a b) (@binary* a b))
	   (x (apply * (cons (@binary*  (car x) (cadr x)) (cddr x))))))
(define / (lambda-case
	   (() 1)
	   ((a) (@binary/ 1 a))
	   ((a b) (@binary/ a b))
	   (x (apply / (cons (@binary/ (car x) (cadr x)) (cddr x))))))

