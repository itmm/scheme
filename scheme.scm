(define nil ())
(define (cadr l)
  (car (cdr l)))
(define (cddr l)
  (cdr (cdr l)))
(define (caddr l)
  (car (cddr l)))
(define (cdddr l)
  (cdr (cddr l)))
(define #f (or))
(define #t (and))
(define (list . l) l)
(define true #t)
(define false #f)
(define (> a b)
  (< b a))
(define (not a) (if a #f #t))
(define (accumulate start op lst)
  (if (null? lst)
	start
	(accumulate (op start (car lst))
	            op
		    (cdr lst))))
(define (@mk-simple-numeric op init)
  (lambda args (accumulate init op args)))
(define + (@mk-simple-numeric @binary+ 0))
(define * (@mk-simple-numeric @binary* 1))
(define (@mk-special-numeric op init)
  (lambda args
    (cond ((null? args)
		   init)
          ((null? (cdr args))
		   (op init (car args)))
		  (else 
			(accumulate (car args)
						op (cdr args))))))
(define - (@mk-special-numeric @binary- 0))
(define / (@mk-special-numeric @binary/ 1))

