#!./scheme
486
(+ 137 349)
(- 1000 334)
(* 5 99)
(/ 10 2)
(+ 2.7 10)
(+ 21 35 12 7)
(* 25 4 12)
(+ (* 3 5) (- 10 6))
(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))
(+ (* 3
	  (+ (* 2 4)
		 (+ 3 5)))
   (+ (- 10 7) 
	  6))
((lambda () 
   (define size 2)
   size
   (* 5 size)
))
((lambda ()
   (define pi 3.14159)
   (define radius 10)
   (* pi (* radius radius))
   (define circumference (* 2 pi radius))
   circumference
))
((lambda()
   (define (square x) (* x x))
   (square 21)
   (square (+ 2 5))
   (define (sum-of-squares x y)
	 (+ (square x) (square y)))
   (sum-of-squares 3 4)
   (define (f a)
	 (sum-of-squares (+ a 1) (* a 2)))
   (f 5)))
((lambda()
   (define (abs x)
	 (cond ((< x 0) (- x))
		   (else x)))
   (abs 5)
   (abs (- 3))))
((lambda()
   (define (abs x)
	 (if (< x 0) (- x) x))
   (abs 5)
   (abs (- 3))

   (define (sqrt-iter guess x)
	 (if (good-enough? guess x)
	   guess (sqrt-iter (improve guess x) x)))
   (define (improve guess x)
	 (average guess (/ x guess)))

   (define (average x y)
	 (/ (+ x y) 2.0))

   (define (good-enough? guess x)
	 (< (abs (- (square guess) x)) 0.0001))

   (define (square x) (* x x))
   (define (sqrt x) (sqrt-iter 1.0 x))
   (sqrt 9)
   (sqrt (+ 100 37))
   (sqrt (+ (sqrt 2) (sqrt 3)))
   (square (sqrt 1000))))

((lambda()
   (define (count-change amount)
	 (cc amount 5))
   (define (cc amount kinds-of-coins)
	 (cond ((= amount 0) 1)
		   ((or (< amount 0) (= kinds-of-coins 0)) 0)
		   (else (+ (cc amount
						(- kinds-of-coins 1))
					(cc (- amount
						   (first-denomination kinds-of-coins))
						kinds-of-coins)))))
   (define (first-denomination kinds-of-coins)
	 (cond ((= kinds-of-coins 1) 1)
		   ((= kinds-of-coins 2) 5)
		   ((= kinds-of-coins 3) 10)
		   ((= kinds-of-coins 4) 25)
		   ((= kinds-of-coins 5) 50)))
   (count-change 100)))
((lambda()
   (define (even? n) (= (remainder n 2) 0))
   (define (square n) (* n n))
   (define (fast-expt b n)
	 (cond ((= n 0) 1)
		   ((even? n) (square (fast-expt b (/ n 2))))
		   (else (* b (fast-expt b (- n 1))))))
   (fast-expt 3 5)))
((lambda()
   (define (gcd a b)
	 (if (= b 0)
	   a
	   (gcd b (remainder a b))))
   (gcd 206 40)))
((lambda()
   (define (smallest-divisor n)
	 (find-divisor n 2))
   (define (square n) (* n n))
   (define (find-divisor n test-divisor)
	 (cond ((> (square test-divisor) n) n)
		   ((divides? test-divisor n) test-divisor)
		   (else (find-divisor n (+ test-divisor 1)))))
   (define (divides? a b)
	 (= (remainder b a) 0))
   (define (prime? n)
	 (= n (smallest-divisor n)))
   (prime? 33)
   (prime? 11)))

