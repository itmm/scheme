"(define nil ())\n"
"(define (cadr l)\n"
"  (car (cdr l)))\n"
"(define (cddr l)\n"
"  (cdr (cdr l)))\n"
"(define (caddr l)\n"
"  (car (cddr l)))\n"
"(define (cdddr l)\n"
"  (cdr (cddr l)))\n"
"(define (list . l) l)\n"
"(define true #t)\n"
"(define false #f)\n"
"(define (null? a) (eq? a '()))\n"
"(define (@numeric-cascade op)\n"
"  (let ([fn #f])\n"
"    (set! fn (case-lambda\n"
"               [(a b) (op a b)]\n"
"               [(a b c . r) (and (op a b) (apply fn b c r))]))\n"
"    fn))\n"
"(define (@binary> a b) (@binary< b a))\n"
"(define (@binary<= a b) (not (@binary> a b)))\n"
"(define (@binary>= a b) (not (@binary< a b)))\n"
"(define < (@numeric-cascade @binary<))\n"
"(define > (@numeric-cascade @binary>))\n"
"(define <= (@numeric-cascade @binary<=))\n"
"(define >= (@numeric-cascade @binary>=))\n"
"(define = (@numeric-cascade @binary=))\n"
"(define eq? (@numeric-cascade @binary-eq?))\n"
"(define eqv? (@numeric-cascade @binary-eqv?))\n"
"(define (not a) (if a #f #t))\n"
"(define (abs x) (if (< x 0) (- x) x))\n"
"(define (even? x) (= (remainder x 2) 0))\n"
"(define (odd? x) (not (even? x)))\n"
"\n"
"(define + (case-lambda\n"
"\t   (() 0)\n"
"\t   ((a) a)\n"
"\t   ((a b) (@binary+ a b))\n"
"\t   (x (apply + (@binary+ (car x) (cadr x)) (cddr x)))))\n"
"(define - (case-lambda\n"
"\t   (() 0)\n"
"\t   ((a) (@binary- 0 a))\n"
"\t   ((a b) (@binary- a b))\n"
"\t   (x (apply - (@binary- (car x) (cadr x)) (cddr x)))))\n"
"(define * (case-lambda\n"
"\t   (() 1)\n"
"\t   ((a) a)\n"
"\t   ((a b) (@binary* a b))\n"
"\t   (x (apply * (@binary* (car x) (cadr x)) (cddr x)))))\n"
"(define / (case-lambda\n"
"\t   (() 1)\n"
"\t   ((a) (@binary/ 1 a))\n"
"\t   ((a b) (@binary/ a b))\n"
"\t   (x (apply / (@binary/ (car x) (cadr x)) (cddr x)))))\n"
"\n"
"(define (map f ls . more)\n"
"  (if (null? more)\n"
"      (let map1 ([ls ls])\n"
"        (if (null? ls)\n"
"            '()\n"
"            (cons (f (car ls))\n"
"\t          (map1 (cdr ls)))))\n"
"      (let map-more ([ls ls] [more more])\n"
"        (if (null? ls)\n"
"\t    '()\n"
"\t    (cons\n"
"\t      (apply f (car ls) (map car more))\n"
"\t      (map-more (cdr ls) (map cdr more)))))))\n"
"\n"
"(define (exists f ls . more)\n"
"  (and (not (null? ls))\n"
"       (let exists_ ([x (car ls)] [ls (cdr ls)] [more more])\n"
"\t (if (null? ls)\n"
"\t     (apply f x (map car more))\n"
"\t     (or (apply f x (map car more))\n"
"\t         (exists_ (car ls) (cdr ls) (map cdr more)))))))\n"
