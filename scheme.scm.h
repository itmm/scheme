"(define nil ())\n"
"(define (cadr l) (car (cdr l)))\n"
"(define (cddr l) (cdr (cdr l)))\n"
"(define (caddr l) (car (cddr l)))\n"
"(define (cdddr l) (cdr (cddr l)))\n"
"(define #t 1)\n"
"(define #f nil)\n"
"(define true #t)\n"
"(define false #f)\n"
"(define (> a b) (< b a))\n"
"(define (null? a) (if a false true))\n"
"(define not null?)\n"
"(define (accumulate start op lst)\n"
"  (if (null? lst) start\n"
"      (accumulate (op start (car lst)) op (cdr lst))))\n"
"(define (#mk-simple-numeric op init)\n"
"  (lambda args (accumulate init op args)))\n"
"(define + (#mk-simple-numeric #binary+ 0))\n"
"(define * (#mk-simple-numeric #binary* 1))\n"
"(define (#mk-special-numeric op init)\n"
"  (lambda args\n"
"    (cond ((null? args) init)\n"
"          ((null? (cdr args)) (op init (car args)))\n"
"\t  (else (accumulate (car args) op (cdr args))))))\n"
"(define - (#mk-special-numeric #binary- 0))\n"
"(define / (#mk-special-numeric #binary/ 1))\n"
"\n"
